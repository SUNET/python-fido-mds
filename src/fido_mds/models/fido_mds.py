r"""
generated by json2python-models v0.2.5 at Tue Mar 22 10:03:03 2022
command: json2models -m FidoMD metadata.json -f pydantic
"""
from datetime import date
from typing import List, Literal, Optional, Union

from pydantic import BaseModel, Field


class Upv(BaseModel):
    major: int
    minor: int


class CaDesc(BaseModel):
    base: int
    min_length: int = Field(..., alias="minLength")
    max_retries: int = Field(..., alias="maxRetries")
    block_slowdown: int = Field(..., alias="blockSlowdown")


class BaDesc(BaseModel):
    self_attested_frr: float = Field(..., alias="selfAttestedFRR")
    self_attested_far: float = Field(..., alias="selfAttestedFAR")
    max_templates: int = Field(..., alias="maxTemplates")
    max_retries: int = Field(..., alias="maxRetries")
    block_slowdown: int = Field(..., alias="blockSlowdown")


class PaDesc(BaseModel):
    min_complexity: int = Field(..., alias="minComplexity")
    max_retries: int = Field(..., alias="maxRetries")
    block_slowdown: int = Field(..., alias="blockSlowdown")


class UserVerificationDetail(BaseModel):
    user_verification_method: str = Field(..., alias="userVerificationMethod")
    ca_desc: Optional[CaDesc] = Field(None, alias="caDesc")
    ba_desc: Optional[BaDesc] = Field(None, alias="baDesc")
    pa_desc: Optional[PaDesc] = Field(None, alias="paDesc")


class Option(BaseModel):
    plat: Optional[bool] = None
    rk: Optional[bool] = None
    client_pin: Optional[bool] = Field(None, alias="clientPin")
    up: Optional[bool] = None
    uv: Optional[bool] = None
    bio_enroll: Optional[bool] = Field(None, alias="bioEnroll")
    user_verification_mgmt_preview: Optional[bool] = Field(None, alias="userVerificationMgmtPreview")
    uv_bio_enroll: Optional[bool] = Field(None, alias="uvBioEnroll")
    cred_mgmt: Optional[bool] = Field(None, alias="credMgmt")
    credential_mgmt_preview: Optional[bool] = Field(None, alias="credentialMgmtPreview")
    pin_uv_auth_token: Optional[bool] = Field(None, alias="pinUvAuthToken")
    large_blobs: Optional[bool] = Field(None, alias="largeBlobs")
    ep: Optional[bool] = None
    authnr_cfg: Optional[bool] = Field(None, alias="authnrCfg")
    set_min_pin_length: Optional[bool] = Field(None, alias="setMinPINLength")
    make_cred_uv_not_rqd: Optional[bool] = Field(None, alias="makeCredUvNotRqd")
    always_uv: Optional[bool] = Field(None, alias="alwaysUv")


class Algorithm(BaseModel):
    type_: Literal["public-key"] = Field(..., alias="type")
    alg: int


class Certification(BaseModel):
    fipscmvp2: int = Field(..., alias="FIPS-CMVP-2")
    fipscmvp2_phy: int = Field(..., alias="FIPS-CMVP-2-PHY")


class AlternativeDescription(BaseModel):
    ru_ru: Optional[str] = Field(None, alias="ru-RU")
    de_de: Optional[str] = Field(None, alias="de-DE")
    en_us: Optional[str] = Field(None, alias="en-US")
    ko_kr: Optional[str] = Field(None, alias="ko-KR")
    zh_tw: Optional[str] = Field(None, alias="zh-TW")


class Plte(BaseModel):
    r: int
    g: int
    b: int


class TcDisplayPngCharacteristic(BaseModel):
    width: int
    height: int
    bit_depth: int = Field(..., alias="bitDepth")
    color_type: int = Field(..., alias="colorType")
    compression: int
    filter_: int = Field(..., alias="filter")
    interlace: int
    plte: Optional[List[Plte]] = []


class SupportedExtension(BaseModel):
    id_: str = Field(..., alias="id")
    fail_if_unknown: bool
    data: Optional[str] = None


class StatusReport(BaseModel):
    status: Literal["FIDO_CERTIFIED", "FIDO_CERTIFIED_L1", "FIDO_CERTIFIED_L2", "NOT_FIDO_CERTIFIED"]
    effective_date: str = Field(..., alias="effectiveDate")
    certification_descriptor: Optional[str] = Field(None, alias="certificationDescriptor")
    certificate_number: Optional[str] = Field(None, alias="certificateNumber")
    certification_policy_version: Optional[Union[float, str]] = Field(None, alias="certificationPolicyVersion")
    certification_requirements_version: Optional[
        Union[float, Literal["1.0.0", "1.0.1", "1.1.0", "1.3.0", "FIDO200201"]]
    ] = Field(None, alias="certificationRequirementsVersion")
    url: Optional[str] = None


class AuthenticatorGetInfo(BaseModel):
    versions: List[Literal["FIDO_2_0", "FIDO_2_1", "FIDO_2_1_PRE", "U2F_V2"]]
    aaguid: str
    options: Option
    extensions: Optional[List[Literal["credBlob", "credProtect", "hmac-secret", "largeBlobKey", "minPinLength"]]] = []
    max_msg_size: Optional[int] = Field(None, alias="maxMsgSize")
    pin_uv_auth_protocols: Optional[List[int]] = Field([], alias="pinUvAuthProtocols")
    max_credential_count_in_list: Optional[int] = Field(None, alias="maxCredentialCountInList")
    max_credential_id_length: Optional[int] = Field(None, alias="maxCredentialIdLength")
    transports: Optional[List[Literal["ble", "internal", "lightning", "nfc", "usb"]]] = []
    algorithms: Optional[List[Algorithm]] = []
    min_pin_length: Optional[int] = Field(None, alias="minPINLength")
    firmware_version: Optional[int] = Field(None, alias="firmwareVersion")
    certifications: Optional[Certification] = None
    max_serialized_large_blob_array: Optional[int] = Field(None, alias="maxSerializedLargeBlobArray")
    max_cred_blob_length: Optional[int] = Field(None, alias="maxCredBlobLength")
    max_rpi_ds_for_set_min_pin_length: Optional[int] = Field(None, alias="maxRPIDsForSetMinPINLength")
    preferred_platform_uv_attempts: Optional[int] = Field(None, alias="preferredPlatformUvAttempts")
    uv_modality: Optional[int] = Field(None, alias="uvModality")
    remaining_discoverable_credentials: Optional[int] = Field(None, alias="remainingDiscoverableCredentials")
    force_pin_change: Optional[bool] = Field(None, alias="forcePINChange")


class MetadataStatement(BaseModel):
    legal_header: str = Field(..., alias="legalHeader")
    description: str
    authenticator_version: int = Field(..., alias="authenticatorVersion")
    protocol_family: Literal["fido2", "u2f", "uaf"] = Field(..., alias="protocolFamily")
    schema_: int = Field(..., alias="schema")
    upv: List['Upv']
    authentication_algorithms: List[str] = Field(..., alias="authenticationAlgorithms")
    public_key_alg_and_encodings: List[Literal["cose", "ecc_x962_der", "ecc_x962_raw", "rsa_2048_raw"]] = Field(
        ..., alias="publicKeyAlgAndEncodings"
    )
    attestation_types: List[Literal["attca", "basic_full", "basic_surrogate"]] = Field(..., alias="attestationTypes")
    user_verification_details: List[List['UserVerificationDetail']] = Field(..., alias="userVerificationDetails")
    key_protection: List[Literal["hardware", "remote_handle", "secure_element", "software", "tee"]] = Field(
        ..., alias="keyProtection"
    )
    matcher_protection: List[Literal["on_chip", "software", "tee"]] = Field(..., alias="matcherProtection")
    attachment_hint: List[Literal["bluetooth", "external", "internal", "nfc", "wired", "wireless"]] = Field(
        ..., alias="attachmentHint"
    )
    tc_display: List[Literal["any", "hardware"]] = Field(..., alias="tcDisplay")
    attestation_root_certificates: List[str] = Field(..., alias="attestationRootCertificates")
    icon: str
    aaguid: Optional[str] = None
    crypto_strength: Optional[int] = Field(None, alias="cryptoStrength")
    authenticator_get_info: Optional[AuthenticatorGetInfo] = Field(None, alias="authenticatorGetInfo")
    alternative_descriptions: Optional[AlternativeDescription] = Field(None, alias="alternativeDescriptions")
    attestation_certificate_key_identifiers: Optional[List[str]] = Field(
        [], alias="attestationCertificateKeyIdentifiers"
    )
    aaid: Optional[str] = None
    tc_display_content_type: Optional[Literal["image/png", "text/plain"]] = Field(None, alias="tcDisplayContentType")
    is_fresh_user_verification_required: Optional[bool] = Field(None, alias="isFreshUserVerificationRequired")
    is_key_restricted: Optional[bool] = Field(None, alias="isKeyRestricted")
    tc_display_png_characteristics: Optional[List[TcDisplayPngCharacteristic]] = Field(
        [], alias="tcDisplayPNGCharacteristics"
    )
    supported_extensions: Optional[List[SupportedExtension]] = Field([], alias="supportedExtensions")


class Entry(BaseModel):
    metadata_statement: MetadataStatement = Field(..., alias="metadataStatement")
    status_reports: List[StatusReport] = Field(..., alias="statusReports")
    time_of_last_status_change: str = Field(..., alias="timeOfLastStatusChange")
    attestation_certificate_key_identifiers: Optional[List[str]] = Field(
        [], alias="attestationCertificateKeyIdentifiers"
    )
    aaguid: Optional[str] = None
    aaid: Optional[str] = None


class FidoMD(BaseModel):
    legal_header: str = Field(..., alias="legalHeader")
    no: int
    next_update: date = Field(..., alias="nextUpdate")
    entries: List[Entry]
